class TrainingController {
    def scaffold = Training
    def genomeFastaFlag = 0
    def String genomeFileName
    def save = {
	def trainingInstance = new Training(params)

        // get date
        def today = new Date()
        println "AUGUSTUS training webserver is starting on ${today}"
        // get IP-address
        String userIP = request.remoteAddr
        println "User IP: ${userIP}"


        // upload of genome file

        def uploadedGenomeFile = request.getFile('GenomeFile')
        if(!uploadedGenomeFile.empty){
            def String dirName = "${trainingInstance.output_dir}/${trainingInstance.accession_id}"
            def projectDir = new File(dirName)
            projectDir.mkdirs()
            uploadedGenomeFile.transferTo( new File (projectDir, "genome.fna"))
            trainingInstance.genome_file = uploadedGenomeFile.originalFilename
            println "Uploaded genome file ${uploadedGenomeFile.originalFilename} was renamed to genome.fna and moved to ${projectDir}"
            // check for fasta format:
            new File("${projectDir}/genome.fna").eachLine{line -> 
                if(!(line =~ /^[>AaTtGgCcHhXxRrYyWwSsMmKkBbVvDdNn]/)){ 
                        //println "We have a problem..."
                        genomeFastaFlag = 1
                        //flash.message = "Your genome file was not in fasta format. The training job was not started. Please try with the correct file format."
            		//chain(action:'create', model:[trainingInstance:trainingInstance])
                        //return
                     
                }
             }
             if(genomeFastaFlag == 1) {
                  println "We have a problem..."
                 // flash.message = "Your genome file was not in fasta format. The training job was not started. Please try with the correct file format."
                 // println "Now we redirect..."
                 // redirect(action:create)
                 // println "Redirect done..."
             }
        }

        // retrieving genome file via wget

        if(!(trainingInstance.genome_ftp_link == null)){
            String dirName = "${trainingInstance.output_dir}/${trainingInstance.accession_id}"
            def projectDir = new File(dirName)
            projectDir.mkdirs()
            def wgetGenome = "wget -O ${projectDir}/genome.fna ${trainingInstance.genome_ftp_link}".execute()
            wgetGenome.waitFor()
            println "Genome file was retrieved from ${trainingInstance.genome_ftp_link} and stored as genome.fna at ${projectDir}"
        }
        
        // upload of est file

        def uploadedEstFile = request.getFile('EstFile')
        if(!uploadedEstFile.empty){
            String dirName = "${trainingInstance.output_dir}/${trainingInstance.accession_id}"
            def projectDir = new File(dirName)
            projectDir.mkdirs()
            uploadedEstFile.transferTo( new File (projectDir, "est.fna"))
            trainingInstance.est_file = uploadedEstFile.originalFilename
            println "Uploaded EST file ${uploadedEstFile.originalFilename} was renamed to est.fna and moved to ${projectDir}"
        }

        // retrieving est file via wget

        if(!(trainingInstance.est_ftp_link == null)){
            String dirName = "${trainingInstance.output_dir}/${trainingInstance.accession_id}"
            def projectDir = new File(dirName)
            projectDir.mkdirs()
            def wgetEst = "wget -O ${projectDir}/est.fna ${trainingInstance.est_ftp_link}".execute()
            wgetEst.waitFor()
            println "EST file was retrieved from ${trainingInstance.est_ftp_link} and stored as est.fna at ${projectDir}"
        }

        // upload of structure file

        def uploadedStructFile = request.getFile('StructFile')
        if(!uploadedStructFile.empty){
            String dirName = "${trainingInstance.output_dir}/${trainingInstance.accession_id}"
            def projectDir = new File(dirName)
            projectDir.mkdirs()
            uploadedStructFile.transferTo( new File (projectDir, "training-gene-structure.gff"))
            trainingInstance.struct_file = uploadedStructFile.originalFilename
            println "Uploaded training gene structure file ${uploadedStructFile.originalFilename} was renamed to training-gene-structure.gff and moved to ${projectDir}"
        }

        // retrieving structure file via wget

        if(!(trainingInstance.struct_ftp_link == null)){
            String dirName = "${trainingInstance.output_dir}/${trainingInstance.accession_id}"
            def projectDir = new File(dirName)
            projectDir.mkdirs()
            def wgetStruct = "wget -O ${projectDir}/training-gene-structure.gff ${trainingInstance.struct_ftp_link}".execute()
            wgetStruct.waitFor()
            println "Training gene structure file was retrieved from ${trainingInstance.struct_ftp_link} and stored as training-gene-structure.gff at ${projectDir}"
        }

        // upload of protein file

        def uploadedProteinFile = request.getFile('ProteinFile')
        if(!uploadedProteinFile.empty){
            String dirName = "${trainingInstance.output_dir}/${trainingInstance.accession_id}"
            def projectDir = new File(dirName)
            projectDir.mkdirs()
            uploadedProteinFile.transferTo( new File (projectDir, "protein.fna"))
            trainingInstance.protein_file = uploadedProteinFile.originalFilename
            println "Uploaded protein file ${uploadedProteinFile.originalFilename} was renamed to protein.fna and moved to ${projectDir}"
        }

        // retrieving protein file via wget

        if(!(trainingInstance.protein_ftp_link == null)){
            String dirName = "${trainingInstance.output_dir}/${trainingInstance.accession_id}"
            def projectDir = new File(dirName)
            projectDir.mkdirs()
            def wgetProtein = "wget -O ${projectDir}/protein.fna ${trainingInstance.protein_ftp_link}".execute()
            wgetProtein.waitFor()
            println "Protein file was retrieved from ${trainingInstance.protein_ftp_link} and stored as protein.fna at ${projectDir}"
        }

        if(genomeFastaFlag == 1){ 
            //println "Hallo!!!"
            def rid = Training.findByProject_name("${trainingInstance.project_name}")
            println "Needs to be deleted: ${rid}"
            //println "Project name: ${trainingInstance.project_name}"
            flash.message = "Your genome file was not in DNA fasta format. Your job was not started. Please try again with the correct format!"
            redirect(action:create)
        } else if(!trainingInstance.hasErrors() && trainingInstance.save()){
            //println "trainingInstance has errors: ${trainingInstance.hasErrors()}"
            flash.message = "Project submitted!"
            redirect(action:show,id:trainingInstance.id)
        }
        else {
           render(view:'create', model:[trainingInstance:trainingInstance])
        }

    }
    //if(genomeFastaFlag == 1){
         // delete database entry
        // def rid = Training.findByProject_name("${trainingInstance.project_name}")
         //println "Needs to be deleted: ${rid}"
       //  rid.delete()
         // delete folder with files
       // def delClos
       // delClos = { println "Dir ${it.canonicalPath}";
           // it.eachDir( delClos );
          //  it.eachFile {
           //     println "File ${it.canonicalPath}";
           //     it.delete()
          //  }
        // }
        //delClos( new File("${projectDir}") )


    //}
}
